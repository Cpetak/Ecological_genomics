xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="green",
xaxt='n',xlab="",
ylab="", main="",
las=1)
species <- c("better", "put", "species")
legend("topright", legend=species,
col=c("green", "blue", "red"),
lty=1
)
SRHist <- hist(SR$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="blue",
xaxt='n',xlab="",
ylab="", main = "",
las=1)
SGHist <- hist(SG$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="red", xlab="",
ylab="", main="",
las=1)
par(mfrow=c(1,1))
mtext(side=2,text="Frequency",line=3.5,cex=2,padj=-2)
mtext(side=1,text="Height (cm)",line=3.5,cex=2)
par(mfrow=c(3,1),mar=c(5,10,2,2))
SCHist <- hist(SC$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="green",
xaxt='n',xlab="",
ylab="", main="",
las=1)
species <- c("better", "put", "species")
legend("topright", legend=species,
col=c("green", "blue", "red"),
lty=1
)
SRHist <- hist(SR$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="blue",
xaxt='n',xlab="",
ylab="", main = "",
las=1)
SGHist <- hist(SG$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="red", xlab="",
ylab="", main="",
las=1)
par(mfrow=c(1,1))
mtext(side=2,text="Frequency",line=3.5,cex=2,padj=-2)
mtext(side=1,text="Height (cm)",line=3.5,cex=2)
#Goldenrod
# set working directory from the Session tab, Dropbox, BCOR102, Goldenrod
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawDataTemplate.csv")
plot(GoldenrodRawData$Diameter)
i <- 1
for (data in GoldenrodRawData$Diameter){
if (data < 1){
GoldenrodRawData$Diameter[i] <- data*10
}
i <- i+1
}
plot(GoldenrodRawData$Diameter)
plot(GoldenrodRawData$Height)
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
summary(SR)
summary(SG)
## Variance values
var(SC$Height)
var(SR$Height)
var(SG$Height)
var(SC$Diameter)
var(SR$Diameter)
var(SG$Diameter)
#Histogram for height
par(mfrow=c(3,1),mar=c(5,10,2,2))
SCHist <- hist(SC$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="green",
xaxt='n',xlab="",
ylab="", main="",
las=1)
species <- c("better", "put", "species")
legend("topright", legend=species,
col=c("green", "blue", "red"),
lty=1
)
SRHist <- hist(SR$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="blue",
xaxt='n',xlab="",
ylab="", main = "",
las=1)
SGHist <- hist(SG$Height,
xlim=c(min(GoldenrodRawData$Height),max(GoldenrodRawData$Height)),
ylim = c(0,40),
col="red", xlab="",
ylab="", main="",
las=1)
par(mfrow=c(1,1))
mtext(side=2,text="Frequency",line=3.5,cex=2,padj=-2)
mtext(side=1,text="Height (cm)",line=3.5,cex=2)
#Histogram for diameter
par(mfrow=c(3,1),mar=c(5,10,2,2))
SCHist <- hist(SC$Diameter,
xlim = c(min(GoldenrodRawData$Diameter),max(GoldenrodRawData$Diameter)),
ylim = c(0,40),
col="green",
xaxt='n',
xlab="",
ylab="",
main="",
las=1)
legend("topright",
legend=species,
col=c("green", "blue", "red"),
lty=1
)
SRHist <- hist(SR$Diameter,
xlim = c(min(GoldenrodRawData$Diameter),max(GoldenrodRawData$Diameter)),
ylim = c(0,40),
col="blue",
xaxt='n',
xlab="",
ylab="",
main="",
las=1)
SGHist <- hist(SG$Diameter,
xlim = c(min(GoldenrodRawData$Diameter),max(GoldenrodRawData$Diameter)),
ylim = c(0,40),
col="red",
ylab="",
main="",
xlab ="",
las=1)
par(mfrow=c(1,1))
mtext(side=2,text="Frequency",line=3.5,cex=2,padj=-2)
mtext(side=1,text="Diameter (cm)",line=3.5,cex=2)
species <- c("better", "put", "species")
#scatter plots
par(mfrow=c(3,1))
#SC
plot(SC$Diameter ~SC$Height, xlab="SC Height", ylab="SC Diameter")
regressionSC <- lm(SC$Diameter ~SC$Height) # don't worry about lm() now, it is to create a line on the plot
abline(regressionSC, col = "darkslategray")
CoefSC <- cor(SC$Diameter, SC$Height)
CoefSC
legend("topleft", bty="n", legend= "r = change this")
#SR
plot(SR$Diameter ~ SR$Height)
regressionSR <- lm(SR$Diameter ~SR$Height) # don't worry about lm() now, it is to create a line on the plot
abline(regressionSR, col = "goldenrod")
CoefSR <- cor(SR$Diameter, SR$Height)
CoefSR
legend("topleft", bty="n", legend= "r = 0.### ")
#SG
plot(SG$Diameter ~ SG$Height)
regressionSG <- lm(SG$Diameter ~ SG$Height) # don't worry about lm() now, it is to create a line on the plot
abline(regressionSG, col = "purple")
CoefSG <- cor(SG$Diameter, SG$Height)
CoefSG
legend("topleft", bty="n", legend= "r = 0.### ")
par(opar)
#boxplot height
par(mfrow= c(1,1)) # you'll get warning messages here - don't worry about them!
boxplot(GoldenrodRawData$Height ~ GoldenrodRawData$SpeciesID,
ylab="Height (cm)",
xlab="Solidago spp",
col = c("yellow", "purple")
)
ANOVAHeight <- aov(GoldenrodRawData$Height ~ GoldenrodRawData$SpeciesID)
summary(ANOVAHeight)
#boxplot diameter
boxplot(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID,
ylab="Diameter (cm)",
xlab="Solidago spp",
col = c("yellow", "purple")
)
ANOVADiameter <- aov(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID)
summary(ANOVADiameter)
import kipoi
# Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 19-Feb-2019
# Setting up parameter values
N=100      # population size
p_ini= 0.0001    # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
if (new_allele=='a' & rbinom(1,1,prob = u)){new_allele='A'} # Optional line to include mutation
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
# Questions
# 1. What is the effect of population size (N) on the probability of extinction of A allele?
# With higher population size: if you run on 100 a lot: dies around 30, sometimes 60
# with 500 -> almost never dies out before the end of 100 iterations
# probs because drift has a lower effect with higher population size
# with 50 one of them will go extinct almost always - higher drift effect
# 2. How does the initial frequency of the A allele affect the probability it will reach fixation?
# starting with 0.1 (N=100 fixed) almost never reaches fixation
# with 0.5 reaches fixation more frequently
# with 0.8 almost always reaches fixation
# 3. Let's now study the combined effects of mutation and genetic drift. Modify the above code to include a probability, u, that if a small "a" allele is chosen, it will mutate to be a big A allele. How does this affect our findings in questinos 1 and 2?
#question 1 - about population size:
# N=100, p=0.1 —> always goes fast to fixation because of drift + a to A mutation
# N= 500, p=0.1 -> same
# N= 50, p=0.1 —> same
# N=100, p=0.01 -> same
# N=100, p=0.5 -> same
#N=100, p=0.0001 -> still same!
file.exists("~/.ssh/id_rsa.pub")
install.packages(c("doMC", "foreach"))
args <- commandArgs(TRUE)
library(foreach)
library(doMC)
numreps <- 10
numcores <- 1
registerDoMC(numcores)
#parameters
inputfilenamebase <- "input"
outputfilenamebase <- "output"
allinfofilenamebase <- "allinfo"
fixedfilenamebase <- "fixedfile"
resultfilebase <- "results"
param1 <- 1
N <- 1000
nl <- 100
d <- 0.7
cap <- 2*N
ytreatments <- c(0.5,1,2,4)
gtreatments <-  c(1,seq(2,20,2))
Y <- rep(ytreatments,rep(length(gtreatments),length(ytreatments)))
G <- rep(gtreatments,length(ytreatments))
numneutralloci <- 10
selcoefsummer<-1
selcoefconst <- 0
foreach (treatment=1:length(Y)) %dopar%{
wintergenerations <- G[treatment]
summergenerations <- G[treatment]
cyclelength <- wintergenerations + summergenerations
numyears <- 1000
numgen <- cyclelength*numyears
inputfilename <- paste(inputfilenamebase,"_",treatment,".txt",sep="")
sink(file=inputfilename)
cat(paste(outputfilenamebase,"_",treatment," #filenamebase\n",sep=""))
cat(paste(treatment,"#seed\n"))
cat(paste(numreps,"#numreps\n"))
cat(paste(wintergenerations,"#winter generations\n"))
cat(paste(summergenerations,"#summer generations\n"))
cat(paste(N,"#Nmin\n"))
cat(paste(N,"#Nmax\n"))
cat(paste(numyears,"#numyears\n"))
cat("1 #number of seasonally selected traits\n")
cat(paste(nl,"#number of seasonally selected loci\n"))
cat("0 #number of constantly selected loci\n")
cat(paste(numneutralloci,"#number of neutral loci\n"))
cat("0.0001 #mutation rate at seasonally selected loci\n")
cat("0 #mutation rate at constantly selected loci\n")
cat("0.0001 #mutation rate at neutral loci\n")
cat("0 #dfe\n")
cat(paste(selcoefsummer,"#seasonal selection coefficient\n"))
cat(paste(selcoefconst,"#constant selection coefficient\n"))
cat("p #fitness function\n")
cat("0 #dde\n")
cat(paste(d,"#trait dominance\n"))
cat(paste(param1,"#fitness parameter 1\n"))
cat(paste(Y[treatment],"#fitness parameter 2\n"))
cat("m #combine traits\n")
cat(paste(cap,"#offspring number cap\n"))
cat("2 #initialization mode\n")
cat("1 #first sampling time\n")
cat("1 #sampling interval\n")
cat(paste(N,"#samplesize\n"))
cat(paste(numyears*2,"#perturbation start\n"))
cat("5 #perturbation run time\n")
cat("10 #perturbation distance\n")
cat("10 #perturbation replicates\n")
cat("0.01 #perturbation frequency\n")
sink()
system(paste("./simplesim",inputfilename))
}
source('~/Dropbox/TA/week10/Graveyard_Script_2019(1).R')
library(knitr)
setwd("~/")
data <- read.csv("all_baits_temp.txt")
data <- read.csv("all_baits_temp.txt")
head(data)
data <- read.csv("all_baits_temp.txt", header = FALSE)
head(data)
start <- 5670258
chr <- c("NW:022145605.1")
df <- as.data.frame(matrix(ncol = 3, nrow = nrow(data)))
View(df)
colnames(df) <- c("CHR", "START", "STOP")
View(df)
df$CHR <- chr
df$START <- start + data$V1
View(df)
df$STOP <- df$START +80
View(df)
write.table(df, file = "allbaits.bed")
write.table(df, file = "allbaits.bed", row.names = FALSE, col.names = FALSE, quote = FALSE)
data <- read.csv("selected_baits_temp.txt", header = FALSE)
start <- 5670258
data <- read.csv("selected_baits_temp.txt", header = FALSE)
start <- 5670258
chr <- c("NW:022145605.1")
df <- as.data.frame(matrix(ncol = 3, nrow = nrow(data)))
colnames(df) <- c("CHR", "START", "STOP")
df$CHR <- chr
df$START <- start + data$V1
df$STOP <- df$START +80
write.table(df, file = "selectedbaits.bed", row.names = FALSE, col.names = FALSE, quote = FALSE)
library(tximportData)
install.packages("tximportData")
library(tximportData)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("tximportData")
BiocManager::install("DESeq2")
BiocManager::install("tximport")
BiocManager::install("tximportData")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
install.packages("ggpubr")
library(readr)
install.packages("methylkit")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE, type="source")
install.packages("S4Vectors")
BiocManager::install("S4Vectors")
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
R --version
getRversion()
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
library(methylKit)
library(methylKit)
library(tidyverse)
library(ggplot2)
library(pheatmap)
setwd("~/Desktop/Ecological_genomics/epigenetics")
getwd()
# read in the sample ids
samples <- read.table("~//Desktop/Ecological_genomics/epigenetics/sample_id.txt", header=FALSE)
View(samples)
# read in the sample ids
samples <- read.table("~/Desktop/Ecological_genomics/epigenetics/sample_id.txt", header=FALSE)
View(samples)
# now point to coverage files
files <- file.path(dir,samples$V1)
# set directory with absolute path (why is this necessary? I have no idea, but gz files wont work with relative paths)
dir <- "/Users/csengepetak/Desktop/Ecological_genomics/epigenetics"
# now point to coverage files
files <- file.path(dir,samples$V1)
(file.exists(files))
all(file.exists(files))
# convert to list
file.list <- as.list(flies)
# convert to list
file.list <- as.list(files)
# get the names only for naming our samples
nmlist <- as.list(gsub("_1_bismark_bt2_pe.bismark.cov.gz","",samples$V1))
View(nmlist)
nmlist
# use methRead to read in the coverage files
myobj <- methRead(location= file.list,
sample.id =   nmlist,
assembly = "atonsa", # this is just a string. no actual database
dbtype = "tabix", #so that not everything has to be in memory at the same time
context = "CpG",
resolution = "base", #we have SNP data
mincov = 20, #minimum coverage per base because it is data from pooled copepods
treatment =
c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4), # eg we have 4 HA_F25 in "samples"
pipeline = "bismarkCoverage",
dbdir = "/Users/csengepetak/Desktop/Ecological_genomics/epigenetics")
myobj
myobj[[15]]
# We can look at the coverage for individual samples with getCoverageStats()
getCoverageStats(myobj[[1]],plot=TRUE)
# We can look at the coverage for individual samples with getCoverageStats()
getCoverageStats(myobj[[1]],plot=TRUE)
# filter samples by depth with filterByCoverage()
filtered.myobj <- filterByCoverage(myobj, lo.count = 20, lo.perc = NULL, hi.count = NULL, hi.perc = 97.5, db.dir = "/Users/csengepetak/Desktop/Ecological_genomics/epigenetics")
meth <- methylKit:::readMethylBaseDB(
dbpath = "/Users/csengepetak/Desktop/Ecological_genomics/epigenetics/methylBase_united.txt.bgz",
dbtype = "tabix",
sample.id =   unlist(nmlist),
assembly = "atonsa", # this is just a string. no actual database
context = "CpG",
resolution = "base",
treatment = c(0,0,0,0,
1,1,1,1,
2,2,2,2,
3,3,3,3,
4,4,4,4),
destrand = FALSE)
meth
# percMethylation() calculates the percent methylation for each site and sample
pm <- percMethylation(meth)
head(pm)
#plot methylation histograms
ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
library(tidyverse)
#plot methylation histograms
ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
dev.off()
#plot methylation histograms
ggplot(gather(as.data.frame(pm)), aes(value)) +
geom_histogram(bins = 10, color="black", fill="grey") +
facet_wrap(~key)
# calculate and plot mean methylation
sp.means <- colMeans(pm)
p.df <- data.frame(sample=names(sp.means),
group = substr(names(sp.means), 1,6),
methylation = sp.means)
ggplot(p.df, aes(x=group, y=methylation, color=group)) +
stat_summary(color="black") + geom_jitter(width=0.1, size=3)
p.df
# sample clustering
clusterSamples(meth, dist="correlation", method = "word.b", plot=TRUE)
dev.off()
# sample clustering
clusterSamples(meth, dist="correlation", method = "word.b", plot=TRUE)
# sample clustering
clusterSamples(meth, dist="correlation", method = "word.D", plot=TRUE)
dev.off()
# sample clustering
clusterSamples(meth, dist="correlation", method = "word.D", plot=TRUE)
# sample clustering
clusterSamples(meth, dist="correlation", method = "ward.D", plot=TRUE)
meth_sub <- reorganize(meth,
sample.ids =c("AA_F00_1","AA_F00_2","AA_F00_3", "AA_F00_4",
"HH_F25_1","HH_F25_2","HH_F25_3","HH_F25_4"),
treatment = c(0,0,0,0,1,1,1,1),
save.db=FALSE)
meth_sub
myDiff <- calculateDiffMeth(meth_sub, overdispersion = "MN", mc.cores = 1, suffix = "AA_HH", adjust = "qvalue", test = "Chisq")
myDiff
# get all differentially methylated bases, the ones that are significant from above
myDiff <- getMethylDiff(myDiff, qvalue = 0.05, difference = 10) #need to be at least 10 differences, kind of arbitrary
myDiff
# we can visualize the changes in methylation frequencies quickly.
hist(getData(myDiff)$meth.diff)
# heatmap
pm <- percMethylation(meth_sub)
# make a dataframe with snp id's, methylation, etc.
sig.in <- as.numeric(row.names(myDiff))
pm.sig <- pm[sig.in,]
din <- getData(myDiff)[,1:3]
df.out <- cbind(paste(getData(myDiff)$chr, getData(myDiff)$start, sep=":"), din, pm.sig)
colnames(df.out) <- c("snp", colnames(din), colnames(df.out[5:ncol(df.out)]))
df.out <- (cbind(df.out,getData(myDiff)[,5:7]))
my_heatmap <- pheatmap(pm.sig,show_rownames = FALSE)
ctrmean <- rowMeans(pm.sig[,1:4])
h.norm<- (pm.sig-ctrmean)
my_heatmap <- pheatmap(h.norm,show_rownames = FALSE)
