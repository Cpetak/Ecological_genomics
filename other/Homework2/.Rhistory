df$CHR <- chr
df$START <- start + data$V1
df$STOP <- df$START +80
write.table(df, file = "selectedbaits.bed", row.names = FALSE, col.names = FALSE, quote = FALSE)
library(tximportData)
install.packages("tximportData")
library(tximportData)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("tximportData")
BiocManager::install("DESeq2")
BiocManager::install("tximport")
BiocManager::install("tximportData")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
install.packages("ggpubr")
library(readr)
setwd("~/Downloads")
data1 <- read.csv("no1.csv", header = TRUE)
View(data1)
data2 <- read.csv("no2.csv", header = TRUE)
View(data2)
data2 <- data2[,1:3]
data3 <- read.csv("no3.csv", header = FALSE)
View(data3)
data3 <- read.csv("no3.csv", header = TRUE)
View(data3)
data4 <- read.csv("no4.csv", header = TRUE)
View(data4)
all_data <- rbind(data1, data2, data3, data4)
colnames(data1)<- c("chr","start","stop")
colnames(data2)<- c("chr","start","stop")
colnames(data3)<- c("chr","start","stop")
colnames(data4)<- c("chr","start","stop")
all_data <- rbind(data1, data2, data3, data4)
View(all_data)
all_data[,"chr" == "Scaffold1"]
all_data[,"Scaffold1"]
all_data[,all_data$chr="Scaffold1"]
all_data[,all_data$chr=="Scaffold1"]
subset(all_data, chr == "Scaffold1")
subset(all_data, chr == "Scaffold1" & start > 100000)
subset(all_data, chr == "Scaffold1" & start > 100000 & stop < 120000)
subset(all_data, chr == "Scaffold833" & start > 48000 & stop < 120000)
subset(all_data, chr == "Scaffold833" & start > 49900 & stop < 52000)
data1 <- read.csv("no1.csv", header = TRUE)
subset(all_data, chr == "Scaffold833" & start > 49900 & stop < 55000)
subset(all_data, chr == "Scaffold833" & start > 48000 & stop < 55000)
subset(all_data, chr == "Scaffold669" & start > 210000 & stop < 220000)
subset(all_data, chr == "Scaffold565" & start > 114000 & stop < 118000)
subset(all_data, chr == "Scaffold669" & start > 74000 & stop < 80000)
subset(all_data, chr == "Scaffold565" & start > 190000 & stop < 205000)
subset(all_data, chr == "Scaffold118" & start > 270000 & stop < 290000)
subset(all_data, chr == "Scaffold118" & start > 380000 & stop < 400000)
subset(all_data, chr == "Scaffold287" & start > 25000 & stop < 35000)
subset(all_data, chr == "Scaffold330" & start > 180000 & stop < 190000)
subset(all_data, chr == "Scaffold330" & start > 180000 & stop < 210000)
subset(all_data, chr == "Scaffold609" & start > 100000 & stop < 120000)
subset(all_data, chr == "Scaffold939" & start > 150000 & stop < 170000)
subset(all_data, chr == "Scaffold939" & start > 140000 & stop < 170000)
subset(all_data, chr == "Scaffold833" & start > 48000 & stop < 55000)
subset(all_data, chr == "Scaffold669" & start > 70000 & stop < 80000)
subset(all_data, chr == "Scaffold565" & start > 200000 & stop < 210000)
subset(all_data, chr == "Scaffold118" & start > 350000 & stop < 400000)
subset(all_data, chr == "Scaffold118" & start > 380000 & stop < 400000)
subset(all_data, chr == "Scaffold287" & start > 20000 & stop < 35000)
subset(all_data, chr == "Scaffold330" & start > 200000 & stop < 210000)
subset(all_data, chr == "Scaffold609" & start > 112000 & stop < 117000)
subset(all_data, chr == "Scaffold939" & start > 140000 & stop < 170000)
write.csv(all_data, "atac_dna_chip.csv")
## Set your working directory
setwd("~/Desktop/Ecological_genomics/other/Homework2")
## Import the libraries that we're likely to need in this session
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('factor', 'factor', 'factor', 'factor'))
head(conds)
dim(conds)
############ Try with only Day 10 data
day10countstable <- countsTableRound %>% select(contains("10"))
dim(day10countstable)
conds10<- subset(conds, day=="10")
dim(conds10)
head(conds10)
## Let's see how many reads we have from each sample:
colSums(day10countstable)
mean(colSums(day10countstable))
barplot(colSums(day10countstable), las=3, cex.names=0.5,names.arg = substring(colnames(day10countstable),1,13))
abline(h=mean(colSums(day10countstable)), col="blue", lwd =2)
## What is the average number of counts per gene?
summary(rowSums(day10countstable))
mean(rowSums(day10countstable))
median(rowSums(day10countstable)) # median is much lower -> not normally distributed gene experssion, some very low/high expression
summary(apply(day10countstable,2,mean))
dds <- DESeqDataSetFromMatrix(countData = day10countstable, colData = conds10, design = ~ climate + treatment + climate:treatment)
dim(dds)
# Filter out genes with few reads, if we choose 76 as minimum that is on average 1 read per sample!
# this reduces the number of tests we have to from 66408 to 23887 -> have to correct less later because of the mulitple stat tests
dds <- dds[rowSums(counts(dds)) > 76]
dds <- DESeq(dds)
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_D_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
summary(res_clim) #we get, "treatment_D_vs_C"
# PCA
vsd <- vst(dds, blind=FALSE)
#you can play with "nsub" operation of this function
data <- plotPCA(vsd, intgroup=c("climate", "treatment"), returnData =TRUE) #can play with ntop, default 500 genes!
percentVar <- round(100*attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$climate <- factor(data$climate, levels=c("CW","HD"), labels = c("CW","HD"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
ggplot(data, aes(PC1, PC2, color=Climate, shape=Treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10")
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010 in individuals from different climates in different treatments") +
theme(plot.title = element_text(hjust = 0.5))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010 in individuals from different climates in different treatments") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010 in individuals from different climates in different treatments") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010 in individuals from different climates in different treatments") +
theme(plot.title = element_text(hjust = 0.5, size=5))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010 in individuals from different climates in different treatments") +
theme(plot.title = element_text(hjust = 0.5, size=10))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
View(day10countstable)
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_D_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
summary(res_clim) #we get, "treatment_D_vs_C"
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
d <-plotCounts(dds, gene="MA_10425837g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_clim),20) #we ordered results by pvalue alread
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate")])
pheatmap(mat, annotation_col=df)
pheatmap(mat, annotation_col=df, cexRow=0.5)
pheatmap(mat, annotation_col=df, cexRow=0.1)
pheatmap(mat, annotation_col=df, fontsize_col = =0.1)
pheatmap(mat, annotation_col=df, fontsize_col =0.1)
pheatmap(mat, annotation_col=df, fontsize_col =10)
pheatmap(mat, annotation_col=df, fontsize_col =5)
pheatmap(mat, annotation_col=df, fontsize_col =7)
pheatmap(mat, annotation_col=df, fontsize_col =7, fontsize_row = 7)
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_H_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
summary(res_clim) #we get, "treatment_D_vs_C"
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10433227g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10427910g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10425837g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10427910g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
#look at a few top genes, if they look similar to what you expect based on model significant result, result it is not driven by one spec gene
d <-plotCounts(dds, gene="MA_10427910g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=climate)) +
theme_minimal() + theme(text = element_text(size=15),panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D")) +
ggtitle("Expression of gene MA_10427910g0010") +
theme(plot.title = element_text(hjust = 0.5, size=15))
p
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, design = ~ climate + treatment + climate:treatment)
# Filter out genes with few reads, if we choose 76 as minimum that is on average 1 read per sample!
# this reduces the number of tests we have to from 66408 to 23887 -> have to correct less later because of the mulitple stat tests
dds <- dds[rowSums(counts(dds)) > 76]
dds <- DESeq(dds)
# PCA
vsd <- vst(dds, blind=FALSE)
#you can play with "nsub" operation of this function
data <- plotPCA(vsd, intgroup=c("climate", "treatment"), returnData =TRUE) #can play with ntop, default 500 genes!
percentVar <- round(100*attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$climate <- factor(data$climate, levels=c("CW","HD"), labels = c("CW","HD"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(PC1, PC2, color=day, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, design = ~ climate + treatment + day)
# Filter out genes with few reads, if we choose 76 as minimum that is on average 1 read per sample!
# this reduces the number of tests we have to from 66408 to 23887 -> have to correct less later because of the mulitple stat tests
dds <- dds[rowSums(counts(dds)) > 76]
dds <- DESeq(dds)
# PCA
vsd <- vst(dds, blind=FALSE)
#you can play with "nsub" operation of this function
data <- plotPCA(vsd, intgroup=c("climate", "treatment"), returnData =TRUE) #can play with ntop, default 500 genes!
percentVar <- round(100*attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$climate <- factor(data$climate, levels=c("CW","HD"), labels = c("CW","HD"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=day, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
#you can play with "nsub" operation of this function
data <- plotPCA(vsd, intgroup=c("climate", "treatment","day"), returnData =TRUE) #can play with ntop, default 500 genes!
percentVar <- round(100*attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$climate <- factor(data$climate, levels=c("CW","HD"), labels = c("CW","HD"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=day, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(PC1, PC2, color=day, shape=climate)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(PC1, PC2, color=day, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
ggtitle("Principal Component Analysis showing only data from day 10") +
theme(plot.title = element_text(hjust = 0.5))
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_H_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
dds <- DESeqDataSetFromMatrix(countData = day10countstable, colData = conds10, design = ~ climate + treatment + day)
## Set your working directory
setwd("~/Desktop/Ecological_genomics/other/Homework2")
## Import the libraries that we're likely to need in this session
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('factor', 'factor', 'factor', 'factor'))
head(conds)
dim(conds)
############ Try with only Day 10 data
day10countstable <- countsTableRound %>% select(contains("10"))
dim(day10countstable)
conds10<- subset(conds, day=="10")
dim(conds10)
head(conds10)
## Let's see how many reads we have from each sample:
colSums(day10countstable)
mean(colSums(day10countstable))
barplot(colSums(day10countstable), las=3, cex.names=0.5,names.arg = substring(colnames(day10countstable),1,13))
abline(h=mean(colSums(day10countstable)), col="blue", lwd =2)
## What is the average number of counts per gene?
summary(rowSums(day10countstable))
mean(rowSums(day10countstable))
median(rowSums(day10countstable)) # median is much lower -> not normally distributed gene experssion, some very low/high expression
summary(apply(day10countstable,2,mean))
dds <- DESeqDataSetFromMatrix(countData = day10countstable, colData = conds10, design = ~ climate + treatment + day)
dds <- DESeqDataSetFromMatrix(countData = day10countstable, colData = conds10, design = ~ climate + treatment + climate:treatment)
dim(dds)
# Filter out genes with few reads, if we choose 76 as minimum that is on average 1 read per sample!
# this reduces the number of tests we have to from 66408 to 23887 -> have to correct less later because of the mulitple stat tests
dds <- dds[rowSums(counts(dds)) > 76]
dds <- DESeq(dds)
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_H_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_clim),20) #we ordered results by pvalue alread
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate")])
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
# PCA
vsd <- vst(dds, blind=FALSE)
topgenes <- head(rownames(res_clim),20) #we ordered results by pvalue alread
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate")])
pheatmap(mat, annotation_col=df, fontsize_col =7, fontsize_row = 7)
#to pull out results from different contrasts
res_clim <- results(dds, name ="treatment_D_vs_C", alpha = 0.05)
res_clim <- res_clim[order(res_clim$padj),]
topgenes <- head(rownames(res_clim),20) #we ordered results by pvalue alread
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate")])
pheatmap(mat, annotation_col=df, fontsize_col =7, fontsize_row = 7)
